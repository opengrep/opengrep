name: build-manylinux-binary
on:
  workflow_call:
    inputs:
      arch:
        description: "Architecture (x86_64 or aarch64)"
        required: false
        default: "x86_64"
        type: string
  workflow_dispatch: null

jobs:

  build-self-contained-manylinux-binary:
    # NOTE: The image below has GLIBC 2.28, but there are others for even older version.
    # See: https://github.com/pypa/manylinux
    container: ${{ inputs.arch == 'x86_64' && 'quay.io/pypa/manylinux_2_28_x86_64' || 'quay.io/pypa/manylinux_2_28_aarch64' }} 
    runs-on: ${{ inputs.arch == 'x86_64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}
    steps:
      - run: |
          yum update -y
          yum install -y zip python3.12-pip python3.12 python3.12-devel ccache patchelf
          alternatives --remove-all python3
          alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1
          alternatives --auto python3
      
      # - run: find / -name "libpython*" #; exit 1
      # - run: yum install -y zip

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set Nuitka cache dir
        run: echo "NUITKA_CACHE_DIR=${{ github.workspace }}/_nuitka" >> $GITHUB_ENV

      - name: Make GHA cache invariant to opengrep version
        run: |
          rm cli/src/semgrep/__init__.py

      - name: Set GHA cache for Nuitka
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # ratchet:actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-v1-nuitka-glibc-${{ hashFiles('cli/src/semgrep/**/*.py') }}
          path: "${{ env.NUITKA_CACHE_DIR }}"

      - uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # ratchet:actions/download-artifact@v4
        with:
          name: manylinux-${{ inputs.arch == 'x86_64' && 'x86' || 'aarch64' }}-wheel

      # - name: Install GitHub CLI
      #   run: |
      #     # Install yum-utils if not already installed
      #     type -p yum-config-manager >/dev/null || yum install -y yum-utils

      #     # Add GitHub CLI repository
      #     yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo

      #     # Install GitHub CLI
      #     yum install -y gh

      # - name: Authenticate GitHub CLI
      #   run: |
      #     gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      # - name: Get Latest Successful Run ID
      #   id: get-run-id
      #   run: |
      #     # Fetch the latest successful run ID for the workflow
      #     RUN_ID=$(gh run list --repo opengrep/opengrep --workflow build-test-core-${{ inputs.arch == 'x86_64' && 'x86' || 'aarch64' }} --status success --limit 1 --json databaseId --jq '.[0].databaseId')
      #     echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      # - name: Output Run ID
      #   run: |
      #     echo "The latest successful run ID is: ${{ steps.get-run-id.outputs.run_id }}"

      # - name: Download Artifact
      #   run: |
      #     gh run download ${{ steps.get-run-id.outputs.run_id }} \
      #       -R opengrep/opengrep -n manylinux-${{ inputs.arch == 'x86_64' && 'x86' || 'aarch64' }}-wheel

      - run: unzip dist.zip

      - name: Install nuitka
        run: |
          python3 -m pip install nuitka
          # /opt/python/cp39-cp39/bin/pip install pyinstaller

      - name: Install opengrep
        run: |
          python3 -m pip install dist/*.whl
          unzip dist/*.whl -d _wheel
          # /opt/python/cp39-cp39/bin/pip install dist/*.whl --target ./_opengrepinstall

      - name: Export OPENGREP_VERSION
        run: echo "OPENGREP_VERSION=$(opengrep --version)" >> $GITHUB_ENV
        shell: bash

      - name: Set SRC_SEMGREP_DIR with wheel contents
        run: |
          echo \
          "SRC_SEMGREP_DIR=\
          ${GITHUB_WORKSPACE}/_wheel/opengrep-$OPENGREP_VERSION.data/purelib/semgrep" \
          >> $GITHUB_ENV

      - name: Create executable
        env:
          PYTHON_BIN: python3
        run: |
          # export PATH=/opt/python/cp39-cp39/bin:$PATH
          # export LD_LIBRARY_PATH=/__t/Python/3.9.21/x64/lib/:$LD_LIBRARY_PATH

          # Package Opengrep using Nuitka

          python3 -m pip install --upgrade setuptools
          python3 -m pip install protobuf

          # install some dependencies for windows (pyinstaller only)
          python3 -m pip install chardet charset-normalizer

          PYTHON_BIN=python3 \
          ./scripts/build-nuitka.sh "v$(opengrep --version)" true $SRC_SEMGREP_DIR

      - name: Zip artifact
        run: zip -j opengrep.zip cli/opengrep

      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # ratchet:actions/upload-artifact@v4
        with:
          name: opengrep_manylinux_binary_${{ inputs.arch }}
          path: opengrep.zip

  test-manylinux-binary:
    needs: build-self-contained-manylinux-binary
    runs-on: ${{ inputs.arch == 'x86_64' && 'ubuntu-22.04' || 'ubuntu-24.04-arm' }}
    steps:
      - uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # ratchet:actions/download-artifact@v4
        with:
          name: opengrep_manylinux_binary_${{ inputs.arch }}
      - run: unzip opengrep.zip
      - run: chmod +x opengrep
      - run: |
          ldd --version
      - run: |
          ./opengrep --version
      - run: |
          ./opengrep --help
      - run: |
          echo '1 == 1' | ./opengrep -l python -e '$X == $X' -
