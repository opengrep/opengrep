name: build-musllinux-binary
on:
  workflow_call:
    inputs:
      arch:
        description: "Architecture (x86_64 or aarch64)"
        required: false
        default: "x86_64"
        type: string
  workflow_dispatch: null

jobs:

  build-self-contained-musllinux-binary:
    runs-on: ${{ inputs.arch == 'x86_64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set Nuitka cache dir
        run: echo "NUITKA_CACHE_DIR=${{ github.workspace }}/_nuitka" >> $GITHUB_ENV

      - name: Make GHA cache invariant to opengrep version
        run: |
          rm cli/src/semgrep/__init__.py

      - name: Set GHA cache for Nuitka
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # ratchet:actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-v1-nuitka-musl-${{ hashFiles('cli/src/semgrep/**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-v1-nuitka-musl-
          path: "${{ env.NUITKA_CACHE_DIR }}"

      - name: Set ALPINE_CONTAINER based on inputs.arch
        env:
          ARCH: ${{ inputs.arch }}
        run: |
          if [ "$ARCH" = "x86_64" ]; then
            echo "ALPINE_CONTAINER=quay.io/pypa/musllinux_1_2_x86_64" >> $GITHUB_ENV
          else
            echo "ALPINE_CONTAINER=quay.io/pypa/musllinux_1_2_aarch64" >> $GITHUB_ENV
          fi

      # NOTE: In fact both linux wheels should work.
      - uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # ratchet:actions/download-artifact@v4
        with:
          name: musllinux-${{ inputs.arch == 'x86_64' && 'x86' || 'aarch64' }}-wheel

      # - name: Install GitHub CLI
      #   run: |
      #     apk add --no-cache github-cli jq

      # - name: Authenticate GitHub CLI
      #   run: |
      #     echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # - name: Get Latest Successful Run ID
      #   id: get-run-id
      #   run: |
      #     # Fetch the latest successful run ID for the workflow
      #     RUN_ID=$(gh run list --repo opengrep/opengrep --workflow build-test-core-${{ inputs.arch == 'x86_64' && 'x86' || 'aarch64' }} --status success --limit 1 --json databaseId --jq '.[0].databaseId')
      #     echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      # - name: Output Run ID
      #   run: |
      #     echo "The latest successful run ID is: ${{ steps.get-run-id.outputs.run_id }}"

      # - name: Download Artifact
      #   run: |
      #     gh run download ${{ steps.get-run-id.outputs.run_id }} \
      #       -R opengrep/opengrep -n musllinux-${{ inputs.arch == 'x86_64' && 'x86' || 'aarch64' }}-wheel

      - name: Create binary inside container
        run: |
          docker run --rm \
            --volume ${{ github.workspace }}:/workspace \
            --workdir /workspace \
            ${{ env.ALPINE_CONTAINER }} \
            /bin/sh -c "
              apk update &&
              apk add --no-cache zip python3 py3-pip py3-virtualenv python3-dev gcc musl-dev ccache patchelf &&
              export NUITKA_CACHE_DIR=/workspace/_nuitka &&
              mkdir -p _nuitka &&
              chown -R root:root \$NUITKA_CACHE_DIR &&
              unzip dist.zip &&
              python3 -m venv venv &&
              . venv/bin/activate &&
              python3 -m pip install nuitka &&
              python3 -m pip install dist/*.whl &&
              unzip dist/*.whl -d _wheel &&
              export OPENGREP_VERSION=\$(opengrep --version) &&
              export SRC_SEMGREP_DIR=/workspace/_wheel/opengrep-\$OPENGREP_VERSION.data/purelib/semgrep &&
              python3 -m pip install --upgrade setuptools && 
              python3 -m pip install protobuf && 
              python3 -m pip install chardet charset-normalizer &&
              ./scripts/build-nuitka.sh v\$OPENGREP_VERSION true \$SRC_SEMGREP_DIR &&
              chown -R $(id -u):$(id -g) \$NUITKA_CACHE_DIR &&
              chown -R $(id -u):$(id -g) /workspace/cli
            "

      - name: Zip artifact
        run: zip -j opengrep.zip cli/opengrep
      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # ratchet:actions/upload-artifact@v4

        with:
          name: opengrep_musllinux_binary_${{ inputs.arch }}
          path: opengrep.zip

  test-musllinux-binary:
    needs: build-self-contained-musllinux-binary
    runs-on: ${{ inputs.arch == 'x86_64' && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}
    steps:
      - name: Set ALPINE_CONTAINER based on inputs.arch
        env:
          ARCH: ${{ inputs.arch }}
        run: |
          if [ "$ARCH" = "x86_64" ]; then
            echo "ALPINE_CONTAINER=quay.io/pypa/musllinux_1_2_x86_64" >> $GITHUB_ENV
          else
            echo "ALPINE_CONTAINER=quay.io/pypa/musllinux_1_2_aarch64" >> $GITHUB_ENV
          fi

      - uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # ratchet:actions/download-artifact@v4
        with:
          name: opengrep_musllinux_binary_${{ inputs.arch }}

      - name: Test binary inside container
        run: |
          docker run --rm \
            --volume ${{ github.workspace }}:/workspace \
            --workdir /workspace \
            ${{ env.ALPINE_CONTAINER }} \
            /bin/sh -c '
              unzip opengrep.zip &&
              chmod +x opengrep &&
              ./opengrep --version &&
              echo "1 == 1" | ./opengrep -l python -e "\$X == \$X" -
            '
