
name: build-windows-binary-x86
on:
  workflow_call: null
  workflow_dispatch: null

env:
  CYGWIN: winsymlinks:native
  PYTHONUTF8: "1"
  NUITKA_CACHE_DIR: D:/_nuitka

jobs:

  build-self-contained-windows-binary:
    defaults:
      run:
        shell: bash
    runs-on: windows-latest
    steps:

      - name: Set up Python 3.12.1
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Query and set SymlinkEvaluation
        shell: pwsh
        run: |
          # Query the current SymlinkEvaluation settings
          fsutil behavior query SymlinkEvaluation

          # Set SymlinkEvaluation to enable R2L and R2R
          fsutil behavior set symlinkEvaluation R2L:1 R2R:1

          # Query the updated SymlinkEvaluation settings
          fsutil behavior query SymlinkEvaluation

      - name: Set-up Git
        run: >-
          git config --global core.autocrlf input;
          git config --system core.longpaths true;
          git config --global fetch.parallel 50

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          fetch-depth: 1

      - run: mkdir ${{ env.NUITKA_CACHE_DIR }}
        shell: bash

      - name: Make GHA cache invariant to opengrep version
        shell: bash
        run: rm cli/src/semgrep/__init__.py

      - name: Set GHA cache for Nuitka
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # ratchet:actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-v1-nuitka-${{ hashFiles('cli/src/semgrep/**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-v1-nuitka-
          path: ${{ env.NUITKA_CACHE_DIR }}

      - name: Set-up cygwin
        uses: cygwin/cygwin-install-action@f61179d72284ceddc397ed07ddb444d82bf9e559 # ratchet:cygwin/cygwin-install-action@master
        with:
          install-dir: D:/cygwin
          packages: diffutils,m4,make,mingw64-i686-gcc-core,mingw64-i686-gcc-g++,mingw64-i686-openssl,mingw64-x86_64-gcc-core,mingw64-x86_64-gcc-g++,mingw64-x86_64-openssl=1.0.2u+za-1,patch,perl,rsync,unzip,mingw64-x86_64-libssh2,mingw64-x86_64-nghttp2,mingw64-x86_64-pcre,mingw64-x86_64-pcre2,mingw64-x86_64-win-iconv,mingw64-x86_64-zstd,mingw64-x86_64-gettext,mingw64-x86_64-libidn2,mingw64-x86_64-curl,gnupg2,mingw64-x86_64-gmp,ccache

      - name: Create BASH_ENV configuration
        shell: bash
        run: >-
          echo "set -o igncr" >> bash_env.sh;
          echo "set -eo pipefail" >> bash_env.sh

      - name: Export BASH_ENV so it's loaded automatically
        run: echo "BASH_ENV=$PWD/bash_env.sh" >> $GITHUB_ENV
        shell: bash

      - name: Install setuptools with --upgrade
        run: pip3 install --upgrade setuptools
      - name: Install nuitka
        run: pip3 install nuitka protobuf

      - uses: actions/download-artifact@v4
        with:
          name: windows-x86-wheel

      # - name: Authenticate GitHub CLI
      #   run: |
      #     gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      # - name: Get Latest Successful Run ID
      #   id: get-run-id
      #   run: |
      #     # Fetch the latest successful run ID for the workflow
      #     RUN_ID=$(gh run list --repo opengrep/opengrep --workflow build-test-windows-x86 --status success --limit 1 --json databaseId --jq '.[0].databaseId')
      #     echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      # - name: Output Run ID
      #   run: |
      #     echo "The latest successful run ID is: ${{ steps.get-run-id.outputs.run_id }}"

      # - name: Download Artifact
      #   run: |
      #     gh run download ${{ steps.get-run-id.outputs.run_id }} \
      #       -R opengrep/opengrep -n windows-x86-wheel
          
      - run: tar -xvzf dist.tgz

      - name: install some dependencies for windows (pyinstaller only)
        run: pip3 install chardet charset-normalizer requests

      - name: Install package
        run: |
          pip3 install dist/*.whl
          unzip dist/*.whl -d _wheel

      - name: Export OPENGREP_VERSION
        run: echo "OPENGREP_VERSION=$(opengrep --version | tr -d '\r')" >> $GITHUB_ENV
        shell: bash

      - name: Set SRC_SEMGREP_DIR with wheel contents
        run: |
          echo \
          "SRC_SEMGREP_DIR=\
          ${GITHUB_WORKSPACE}/_wheel/opengrep-$OPENGREP_VERSION.data/purelib/semgrep" \
          >> $GITHUB_ENV

      - name: Build executable
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
        run: |
          ./scripts/build-nuitka.sh "v$OPENGREP_VERSION" true $SRC_SEMGREP_DIR

      - uses: actions/upload-artifact@v4
        with:
          name: opengrep_windows_binary_x86
          path: cli/opengrep.exe 

  test-windows-binary:
    defaults:
      run:
        shell: bash
    needs: build-self-contained-windows-binary
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: opengrep_windows_binary_x86
      - run: chmod +x opengrep.exe 
      - run: time ./opengrep.exe --version
      - run: ./opengrep.exe --help
      - run: echo '1 == 1' | ./opengrep.exe -v -l python -e "\$X == \$X" -
