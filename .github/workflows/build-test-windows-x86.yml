
# NOTE: This workflow is adapted from `build-test-windows-x86.yml` in Semgrep v1.100.0.
# NOTE: Do *NOT* generate from jsonnet, this is written direct in .yml for now.
# TODO: Ensure that the `use-cache` options works as intended.

name: build-test-windows-x86
on:
  push:
    branches:
      - main
      - windows/**
      # - dm/** # branch where this change was introduced
    paths-ignore:
      - '**.md'
  workflow_call:
    inputs:
      use-cache:
        default: true
        description: Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build.
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      use-cache:
        default: true
        description: Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build.
        required: true
        type: boolean

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ github.event_name == 'push' }}

env:
  CYGWIN: winsymlinks:native
  OPAMROOT: D:/.opam
  DUNE_CACHE_ROOT: D:/dune
  OPAMCONFIRMLEVEL: unsafe-yes
  OPAM_VERSION: "2.3.0"

jobs:

  build-core:
    strategy:
      matrix:
        ocaml_version: ["5.3.0"]
    # defaults:
    #   run:
    #     shell: bash

    runs-on: windows-2022

    steps:

      # NOTE: This is what `setup-ocaml` does, may not be needed here.
      - name: Query and set SymlinkEvaluation
        shell: pwsh
        run: |
          # Query the current SymlinkEvaluation settings
          fsutil behavior query SymlinkEvaluation

          # Set SymlinkEvaluation to enable R2L and R2R
          fsutil behavior set symlinkEvaluation R2L:1 R2R:1

          # Query the updated SymlinkEvaluation settings
          fsutil behavior query SymlinkEvaluation

      - name: Set-up Git
        run: >-
          git config --global core.autocrlf input;
          git config --system core.longpaths true;
          git config --global fetch.parallel 50

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          submodules: true

      - name: Set-up cygwin
        # if: steps.cache.outputs.cache-hit != 'true'
        uses: cygwin/cygwin-install-action@f61179d72284ceddc397ed07ddb444d82bf9e559 # ratchet:cygwin/cygwin-install-action@master
        with:
          install-dir: D:/cygwin
          packages: curl,diffutils,m4,make,mingw64-i686-gcc-core,mingw64-i686-gcc-g++,mingw64-i686-openssl,mingw64-x86_64-gcc-core,mingw64-x86_64-gcc-g++,mingw64-x86_64-openssl=1.0.2u+za-1,patch,perl,rsync,unzip,mingw64-x86_64-libssh2,mingw64-x86_64-nghttp2,mingw64-x86_64-pcre,mingw64-x86_64-pcre2,mingw64-x86_64-win-iconv,mingw64-x86_64-zstd,mingw64-x86_64-gettext,mingw64-x86_64-libidn2,mingw64-x86_64-curl,gnupg2,mingw64-x86_64-gmp

      - name: Create BASH_ENV configuration
        shell: bash
        run: >-
          echo "set -o igncr" >> bash_env.sh;
          echo "set -eo pipefail" >> bash_env.sh

      - name: Debug
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
        shell: bash
        run: |
          echo "CYGWIN = $CYGWIN"

          ls /usr/x86_64-w64-mingw32/sys-root/mingw/bin | grep dll
          
          ls -la

          echo " "
          uname -a
          pwd
          cygpath -w $(pwd)
          cygpath -w /usr/x86_64-w64-mingw32/sys-root/mingw/bin/
          which ar
          ls /cygdrive/c/mingw64/bin
          echo $PATH | tr ':' '\n'
          ls -l /usr/bin
          ls -l /usr/x86_64-w64-mingw32/bin
          which x86_64-w64-mingw32-gcc

          echo " "
          echo "Cygwin packages"
          cygcheck -c

      - name: Restore Dune cache
        id: cache-dune-win32-64
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # ratchet:actions/cache@v4
        with:
          path: ${{ env.DUNE_CACHE_ROOT }}
          key: dune-cache-${{ runner.os }}-${{ runner.arch }}-v1-opam-${{ matrix.ocaml_version }}-${{ github.run_id }}
          restore-keys: dune-cache-${{ runner.os }}-${{ runner.arch }}-v1-opam-${{ matrix.ocaml_version }}-
      
      - name: Restore _opam
        id: cache-opam-win32-64
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # ratchet:actions/cache/restore@v4
        with:
          path: _opam
          key: opam-cache-${{ runner.os }}-${{ runner.arch }}-v1-opam-${{ matrix.ocaml_version }}-${{ hashFiles('opam/*.opam') }}

      - name: Restore OPAM_ROOT
        id: cache-opamroot-win32-64
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # ratchet:actions/cache/restore@v4
        with:
          path: ${{ env.OPAMROOT }} # C:\Users\runneradmin\AppData\Local\opam
          key: opamroot-cache-${{ runner.os }}-${{ runner.arch }}-v1-opam-${{ matrix.ocaml_version }}-${{ hashFiles('opam/*.opam') }}
          
      - name: Install OPAM
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
          OPAMYES: 1
          # OPAMCONFIRMLEVEL: unsafe-yes
          OPAMSOLVERTIMEOUT: 600
          OPAMCOLOR: always
        shell: bash
        run: |
          # Define variables
          OPAM_VERSION=${{ env.OPAM_VERSION }}
          OCAML_VERSION=${{ matrix.ocaml_version }}
          OPAM_BIN="opam-${OPAM_VERSION}-x86_64-windows.exe"
          OPAM_SIG="${OPAM_BIN}.sig"
          DOWNLOAD_URL="https://github.com/ocaml/opam/releases/download/${OPAM_VERSION}"
          GPG_KEY_URL="https://opam.ocaml.org/opam-dev-pubkey.pgp"
          DEST_DIR="/usr/bin"
          OPAM_DEST="${DEST_DIR}/opam.exe"

          # Download the binary, signature, and GPG public key
          echo "Downloading opam binary, signature, and GPG public key..."
          curl -fsSL "${DOWNLOAD_URL}/${OPAM_BIN}" -o "${OPAM_BIN}"
          curl -fsSL "${DOWNLOAD_URL}/${OPAM_SIG}" -o "${OPAM_SIG}"
          curl -fsSL "${GPG_KEY_URL}" -o opam-dev-pubkey.pgp

          # Import the GPG public key
          echo "Importing OCaml's GPG public key..."
          gpg --import opam-dev-pubkey.pgp

          # Verify the signature
          echo "Verifying the signature..."
          gpg --verify "${OPAM_SIG}" "${OPAM_BIN}"
          if [ $? -ne 0 ]; then
              echo "Signature verification failed. Aborting."
              exit 1
          fi

          # Move and make the binary executable
          echo "Moving the binary to ${DEST_DIR}..."
          mv "${OPAM_BIN}" "${OPAM_DEST}"
          chmod +x "${OPAM_DEST}"

          # Clean up signature and public key files
          rm -f "${OPAM_SIG}" opam-dev-pubkey.pgp

          echo "Opam ${OPAM_VERSION} installed successfully at ${OPAM_DEST}"

          # Check opam version
          opam --version

      - name: OPAM Init
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
          OPAMYES: 1
          # OPAMCONFIRMLEVEL: unsafe-yes
          OPAMSOLVERTIMEOUT: 600
          OPAMCOLOR: always
          # OPAMROOT: C:/Users/runneradmin/AppData/Local/opam
        shell: bash
        if: steps.cache-opamroot-win32-64.outputs.cache-hit != 'true'
        # if: steps.cache-opam-win32-64.outputs.cache-hit != 'true'
        run: |
          opam init \
          --no-setup \
          --bare \
          --disable-shell-hook \
          --disable-sandboxing \
          --cygwin-local-install \
          --cygwin-location=D:/cygwin

          opam var

      - name: Create Switch
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
          OPAMYES: 1
          # OPAMCONFIRMLEVEL: unsafe-yes
          OPAMSOLVERTIMEOUT: 600
          OPAMCOLOR: always
        shell: bash
        if: steps.cache-opam-win32-64.outputs.cache-hit != 'true'
        run: |
          export OCAML_VERSION=${{ matrix.ocaml_version }}
          echo "Creating local switch with OCaml $OCAML_VERSION..."
          opam switch --no-install --packages="ocaml-base-compiler.$OCAML_VERSION" create .

          eval $(opam env)

          # Check OCaml version
          opam exec -- ocaml -version

          # XXX: Is that needed here?
          # opam update

      - name: Prepare Switch
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
          # OPAMCONFIRMLEVEL: unsafe-yes
          OPAMCOLOR: always
        shell: bash
        if: steps.cache-opam-win32-64.outputs.cache-hit != 'true'
        run: |
          eval $(opam env)

          opam env

          # opam pin --no-action add semgrep.dev .
          # echo "Pinning local packages..."
          # for f in opam/*.opam;
          #   do opam pin --no-action add "$(basename "$f" .opam).dev" .; done;

          echo "Installing dune..."
          opam install dune
          
      - name: Build tree-sitter
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
          CC: x86_64-w64-mingw32-gcc
        shell: bash
        run: |
          eval $(opam env)

          cd libs/ocaml-tree-sitter-core
          ./configure
          ./scripts/download-tree-sitter --lazy
          PREFIX_TS="$(pwd)/tree-sitter"
          cd downloads/tree-sitter
          make PREFIX="$PREFIX_TS" CFLAGS="-O3 -Wall -Wextra"
          make PREFIX="$PREFIX_TS" install

      - name: Install OPAM dependencies
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
          CC: x86_64-w64-mingw32-gcc # Needed for ocurl
          # OPAMCONFIRMLEVEL: unsafe-yes
        shell: bash
        if: steps.cache-opam-win32-64.outputs.cache-hit != 'true'
        run: |
          eval $(opam env)

          export CYGWIN_ROOT_BIN=/cygdrive/d/cygwin/bin
          export CYGWIN_MINGW_BIN=/usr/x86_64-w64-mingw32/sys-root/mingw/bin
          export PATH="${CYGWIN_ROOT_BIN}:${PATH}:${CYGWIN_MINGW_BIN}"
          make install-deps-WINDOWS-for-semgrep-core
          ./scripts/install-memprof-limits-dev.sh
          make install-opam-deps

      - name: Prepare _opam for saving
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
        shell: bash
        run: |
          opam clean --all-switches \
            --download-cache \
            --logs \
            --repo-cache \
            --untracked \
            --unused-repositories

      - name: Save _opam
        if: steps.cache-opam-win32-64.outputs.cache-hit != 'true'
        id: cache-opam-win32-64-save
        uses: actions/cache/save@d4323d4df104b026a6aa633fdb11d772146be0bf # ratchet:actions/cache/save@v4
        with:
          path: _opam
          key: ${{ steps.cache-opam-win32-64.outputs.cache-primary-key }}

      - name: Save OPAM_ROOT
        if: steps.cache-opamroot-win32-64.outputs.cache-hit != 'true'
        id: cache-opamroot-win32-64-save
        uses: actions/cache/save@d4323d4df104b026a6aa633fdb11d772146be0bf # ratchet:actions/cache/save@v4
        with:
          path: ${{ env.OPAMROOT }} # C:\Users\runneradmin\AppData\Local\opam
          key: ${{ steps.cache-opamroot-win32-64.outputs.cache-primary-key }}
          
      - name: Build opengrep-core
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
        shell: bash
        run: |
          export TREESITTER_INCDIR=$(pwd)/libs/ocaml-tree-sitter-core/tree-sitter/include
          export TREESITTER_LIBDIR=$(pwd)/libs/ocaml-tree-sitter-core/tree-sitter/lib
          # NOTE: This should not be needeed, should investigate.
          export PCRE2_INCDIR="/usr/x86_64-w64-mingw32/sys-root/mingw/include/"
          export CYGWIN_ROOT_BIN="/usr/bin"
          export PATH="${PATH}:${PCRE2_INCDIR}"

          for filename in $(find ./languages/ ./libs/ocaml-tree-sitter-core/ -name dune); do
            grep -v rpath $filename > $filename.new
            mv $filename.new $filename
          done

          # HACK: /usr/bin must take precedence over all paths in the opam env.
          # Else one gets weird linking errors, because of the length of the
          # argument list. And `opam exec` will always re-arrange the path and
          # make this fail to compile.
          PATH="${CYGWIN_ROOT_BIN}:$(opam exec -- printenv PATH)" dune build _build/install/default/bin/opengrep-core.exe

      - name: Trim Dune cache
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
        shell: bash
        run: |
          opam exec -- dune cache trim --size=1000MB

      - name: Test opengrep-core
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
        shell: bash
        run: |
          export CYGWIN_MINGW_BIN=/usr/x86_64-w64-mingw32/sys-root/mingw/bin
          export PATH="${CYGWIN_MINGW_BIN}:${PATH}"
          
          ldd _build/install/default/bin/opengrep-core.exe

          _build/install/default/bin/opengrep-core.exe -version
          _build/install/default/bin/opengrep-core.exe -l python -rules tests/windows/rules.yml -json tests/windows/test.py

      - name: Package opengrep-core
        env:
          BASH_ENV: ${{ github.workspace }}/bash_env.sh
        shell: bash
        run: |
          mkdir artifacts
          cp _build/install/default/bin/opengrep-core.exe artifacts/

          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libstdc++-6.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgcc_s_seh-1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libwinpthread-1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpcre-1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgmp-10.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpcre2-8-0.dll artifacts/
          # cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libeay32.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libidn2-0.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libnghttp2-14.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libssh2-1.dll artifacts/
          # cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/ssleay32.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libzstd-1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/zlib1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/iconv.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libintl-8.dll artifacts/
          cp "c:/Program Files/Amazon/AWSCLIV2/libcrypto-3.dll" artifacts/
          cp "c:/Program Files/Amazon/AWSCLIV2/libssl-3.dll" artifacts/

          tar czvf artifacts.tgz artifacts

      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # ratchet:actions/upload-artifact@v4
        with:
          name: opengrep-core-and-dependent-libs-w64-artifact
          path: artifacts.tgz

  build-wheels:
    defaults:
      run:
        shell: bash
    needs:
      - build-core
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # ratchet:actions/download-artifact@v4
        with:
          name: opengrep-core-and-dependent-libs-w64-artifact
      - run: |
          tar xvfz artifacts.tgz
          cp artifacts/* cli/src/semgrep/bin
          ./scripts/build-wheels.sh --plat-name win_amd64
      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # ratchet:actions/upload-artifact@v4
        with:
          name: windows-x86-wheel
          path: cli/dist.tgz

  test-wheels:
    defaults:
      run:
        shell: bash
    needs:
      - build-wheels
    runs-on: windows-2022
    steps:
      - uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # ratchet:actions/download-artifact@v4
        with:
          name: windows-x86-wheel
      - run: tar xzvf dist.tgz
      - name: install package
        run: pip3 install dist/*.whl
      - name: test version output
        run: opengrep --version
      - name: test help output
        run: opengrep --help
      - name: e2e opengrep-core test
        run: >-
          export PYTHONIOENCODING=utf-8;
          echo '1 == 1' | opengrep -l python -e '$X == $X' -
      # Test SARIF output which previously failed on Windows only:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          submodules: false
      - name: include paths test
        run: PYTHONIOENCODING=utf-8 opengrep scan -f tests/windows/rules.yml tests/windows/test.py
      - name: sarif output test
        run: PYTHONIOENCODING=utf-8 opengrep scan --sarif -f tests/windows/rules.yml tests/windows/test.py
